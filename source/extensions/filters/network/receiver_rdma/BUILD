cc_library(
    name = "Context",
    srcs = ["src/infinity/core/Context.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "Atomic",
    srcs = ["src/infinity/memory/Atomic.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "Buffer",
    srcs = ["src/infinity/memory/Buffer.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "Region",
    srcs = ["src/infinity/memory/Region.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "RegionToken",
    srcs = ["src/infinity/memory/RegionToken.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "RegisteredMemory",
    srcs = ["src/infinity/memory/RegisteredMemory.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "QueuePair",
    srcs = ["src/infinity/queues/QueuePair.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "QueuePairFactory",
    srcs = ["src/infinity/queues/QueuePairFactory.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/queues/QueuePairFactory.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h",
    "src/infinity/utils/Address.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "RequestToken",
    srcs = ["src/infinity/requests/RequestToken.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/queues/QueuePairFactory.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h",
    "src/infinity/utils/Address.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "Address",
    srcs = ["src/infinity/utils/Address.cpp"],    
    hdrs = ["src/infinity/core/Context.h", 
    "src/infinity/core/Configuration.h", 
    "src/infinity/queues/QueuePair.h",
    "src/infinity/queues/QueuePairFactory.h",
    "src/infinity/memory/Atomic.h",
    "src/infinity/memory/Buffer.h",
    "src/infinity/requests/RequestToken.h",
    "src/infinity/utils/Debug.h",
    "src/infinity/memory/Region.h",
    "src/infinity/memory/RegionType.h",
    "src/infinity/memory/RegisteredMemory.h",
    "src/infinity/memory/RegionToken.h",
    "src/infinity/utils/Address.h"
    ],
    strip_include_prefix = "src",
    visibility = ["//visibility:public"],
)


load(
    "//bazel:envoy_build_system.bzl",
    "envoy_cc_extension",
    "envoy_cc_library",
    "envoy_extension_package",
)

licenses(["notice"])  # Apache 2

# Echo L4 network filter. This is primarily a simplistic example.
# Public docs: https://envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/echo_filter

envoy_extension_package()

envoy_cc_library(
    name = "receiver_rdma",
    srcs = ["receiver_rdma.cc"],
    hdrs = ["receiver_rdma.h"],
    deps = [
        "//envoy/buffer:buffer_interface",
        "//envoy/network:connection_interface",
        "//envoy/network:filter_interface",
        "//source/common/common:assert_lib",
        "//source/common/common:minimal_logger_lib",
        "//source/common/buffer:buffer_lib",
        "//envoy/event:dispatcher_interface",
        ":Context",
        ":Atomic",
        ":Buffer",
        ":Region",
        ":RegionToken",
        ":RegisteredMemory",
        ":QueuePair",
        ":QueuePairFactory",
        ":RequestToken",
        ":Address"
    ],
)

envoy_cc_extension(
    name = "config",
    srcs = ["config.cc"],
    # The echo filter is used in integration tests which don't need an upstream.
    extra_visibility = [
        "//test/integration:__subpackages__",
    ],
    deps = [
        ":receiver_rdma",
        "//envoy/registry",
        "//envoy/server:filter_config_interface",
        "//source/extensions/filters/network:well_known_names",
        "//source/extensions/filters/network/common:factory_base_lib",
        "@envoy_api//envoy/extensions/filters/network/receiver_rdma/v3:pkg_cc_proto",
    ],
)
